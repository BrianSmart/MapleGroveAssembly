#!/bin/bash
#PBS -q condo05
#PBS -l select=1:ncpus=64:mem=500GB
#PBS -l walltime=168:00:00
#PBS -W group_list=x-ccast-prj-hulke
#PBS -N ContactMatrixContigs
#PBS -j oe

# --- SCRIPT EXECUTION ---
set -e
set -o pipefail
# Define the absolute base directory for the project
BASE_DIR="/mmfs1/projects/brent.hulke/FLAX/Maple_Grove_Assembly"
cd "${BASE_DIR}"

echo "Job running in directory: $(pwd)"
echo "Started at: $(date)"

# --- ENVIRONMENT SETUP ---
module load samtools/1.20
module load bwa-mem2/2.2.1
source ~/miniconda3/etc/profile.d/conda.sh
conda activate pairtools_pretext_env
echo "Environment activated."

# ====================================================================
# --- CONFIGURATION: EDIT THESE VARIABLES FOR A NEW PROJECT ---
# ====================================================================

# 1. Define the unique prefix for your current project.
PROJECT_NAME="maple_grove"

# 2. Define the list of assembly types to process.
#    The script will look for files like: maple_grove.asm.hic.p_ctg.fasta
ASSEMBLY_SUFFIXES=("asm.hic.p_ctg" "asm.hic.hap1.p_ctg" "asm.hic.hap2.p_ctg")

# ====================================================================

# --- GLOBAL VARIABLES (SHOULD NOT NEED TO BE EDITED) ---
THREADS=${PBS_NP}
MAIN_OUT_DIR="08_contactMatrixContigs"
TMP_DIR="${MAIN_OUT_DIR}/tmp"
HIC_R1="rawdata/DTG-OmniC-232_R1_001.fastq.gz"
HIC_R2="rawdata/DTG-OmniC-232_R2_001.fastq.gz"

# Create necessary base directories
mkdir -p "${MAIN_OUT_DIR}"
mkdir -p "${TMP_DIR}"

# --- MAIN ANALYSIS COMMAND ---
echo "Running contact matrix pipeline for project: ${PROJECT_NAME}"

# Loop through each assembly type
for ASM_SUFFIX in "${ASSEMBLY_SUFFIXES[@]}"; do
    HAP_PREFIX="${PROJECT_NAME}.${ASM_SUFFIX}"
    
    echo "----------------------------------------------------"
    echo "Processing assembly: ${HAP_PREFIX}"
    echo "----------------------------------------------------"

    # --- Define file paths for this specific haplotype ---
    ASM_FASTA="${BASE_DIR}/05_gfastats/${HAP_PREFIX}.fasta"
    ASM_GENOME="${MAIN_OUT_DIR}/${HAP_PREFIX}.genome"
    ALIGNED_SAM="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC.sam"
    PARSED_PAIRSAM="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC_parsed.pairsam"
    SORTED_PAIRSAM="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC_sorted.pairsam"
    DEDUP_STATS="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC_pairtools_stats.txt"
    DEDUP_PAIRSAM="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC_dedup.pairsam"
    MAPPED_PAIRS="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC_mapped.pairs"
    UNSORTED_BAM="${MAIN_OUT_DIR}/${HAP_PREFIX}_alignedToHiC_unsorted.bam"
    FINAL_BAM="${MAIN_OUT_DIR}/${HAP_PREFIX}_mappedToHiC.PT.bam"
    PRETEXT_MAP="${MAIN_OUT_DIR}/${HAP_PREFIX}_hic_pretext"
    SNAPSHOT_OUT_PREFIX="${MAIN_OUT_DIR}/${HAP_PREFIX}_hic_pretext_snapshot"

    # --- Step 1: Prepare Assembly Files ---
    echo "Step 1: Indexing assembly ${ASM_FASTA}..."
    if [ ! -f "${ASM_FASTA}" ]; then echo "ERROR: Input FASTA not found: ${ASM_FASTA}"; continue; fi
    samtools faidx "${ASM_FASTA}"
    cut -f1,2 "${ASM_FASTA}.fai" > "${ASM_GENOME}"
    bwa-mem2 index "${ASM_FASTA}"

    # --- Step 2: Align Hi-C Reads ---
    echo "Step 2: Aligning Hi-C reads..."
    bwa-mem2 mem -5SP -T0 -t ${THREADS} "${ASM_FASTA}" "${HIC_R1}" "${HIC_R2}" > "${ALIGNED_SAM}"

    # --- Step 3-5: Pairtools and Samtools processing ---
    echo "Step 3a: Parsing SAM file..."
    pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 --nproc-in ${THREADS} --nproc-out ${THREADS} --chroms-path "${ASM_GENOME}" "${ALIGNED_SAM}" > "${PARSED_PAIRSAM}"
    echo "Step 3b: Sorting pairsam..."
    pairtools sort --tmpdir="${TMP_DIR}" --nproc ${THREADS} "${PARSED_PAIRSAM}" > "${SORTED_PAIRSAM}"
    echo "Step 4: Marking duplicates..."
    pairtools dedup --nproc-in ${THREADS} --nproc-out ${THREADS} --mark-dups --output-stats "${DEDUP_STATS}" --output "${DEDUP_PAIRSAM}" "${SORTED_PAIRSAM}"
    echo "Step 5a: Splitting pairsam..."
    pairtools split --nproc-in ${THREADS} --nproc-out ${THREADS} --output-pairs "${MAPPED_PAIRS}" --output-sam "${UNSORTED_BAM}" "${DEDUP_PAIRSAM}"
    echo "Step 5b: Sorting final BAM..."
    samtools sort -@ ${THREADS} -T "${TMP_DIR}/${HAP_PREFIX}_tmp" -o "${FINAL_BAM}" "${UNSORTED_BAM}"
    echo "Step 5c: Indexing final BAM..."
    samtools index "${FINAL_BAM}"

    # --- Step 6: Generate and Visualize Contact Map ---
    echo "Step 6a: Generating PretextMap data..."
    samtools view -h "${FINAL_BAM}" | PretextMap -o "${PRETEXT_MAP}" --sortby nosort --mapq 10
    echo "Step 6b: Creating PretextMap snapshot..."
    PretextSnapshot -m "${PRETEXT_MAP}" --sequences FullMap -o "${SNAPSHOT_OUT_PREFIX}"
    
    echo "--- Finished processing ${HAP_PREFIX} ---"
done

# --- Final Cleanup ---
echo "Cleaning up intermediate files..."
rm -f ${MAIN_OUT_DIR}/*_alignedToHiC.sam
rm -f ${MAIN_OUT_DIR}/*_alignedToHiC_parsed.pairsam
rm -f ${MAIN_OUT_DIR}/*_alignedToHiC_sorted.pairsam
rm -f ${MAIN_OUT_DIR}/*_alignedToHiC_dedup.pairsam
rm -f ${MAIN_OUT_DIR}/*_alignedToHiC_unsorted.bam
rm -rf "${TMP_DIR}"

echo "All steps complete."
echo "Job finished at: $(date)"
